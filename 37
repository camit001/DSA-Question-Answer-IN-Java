========================= Question =========================

Construct Tree from Inorder & Preorder

Given two arrays representing the inorder and preorder traversals of a binary tree, construct the tree and return the root node of the constructed tree.
Note: The output is written in postorder traversal.
Examples:
Input: inorder[] = [1, 6, 8, 7], preorder[] = [1, 6, 7, 8]
Output: [8, 7, 6, 1]
Explanation: The tree will look like

Input: inorder[] = [3, 1, 4, 0, 2, 5], preorder[] = [0, 1, 3, 4, 2, 5]
Output: [3, 4, 1, 5, 2, 0]
Explanation: The tree will look like

Input: inorder[] = [2, 5, 4, 1, 3], preorder[] = [1, 4, 5, 2, 3]
Output: [2, 5, 4, 3, 1]
Explanation: The tree will look like

Constraints:
1 ≤ number of nodes ≤ 10^3
0 ≤ nodes -> data ≤ 10^3
Both the inorder and preorder arrays contain unique values.


========================= Answer =========================

import java.util.HashMap;
import java.util.Map;

// Definition for a binary tree node.
class Node {
    int val;
    Node left;
    Node right;
    Node(int x) {
        val = x;
    }
}

class Solution {
    
    Map<Integer, Integer> mapping(int in[]) {
        Map<Integer, Integer> map = new HashMap<>();
        
        for (int i = 0; i < in.length; i++) {
            map.put(in[i], i);
        }
        
        return map;
    }
    
    Node Build(int in[], int pre[], Map<Integer, Integer> map, int arr[], int s, int e) {
        if (arr[0] >= in.length || s > e) {
            return null;
        }
        
        int ele = pre[arr[0]++];
        Node root = new Node(ele);
        
        root.left = Build(in, pre, map, arr, s, map.get(ele) - 1);
        root.right = Build(in, pre, map, arr, map.get(ele) + 1, e);
        
        return root;
    }
    
    public Node buildTree(int inorder[], int preorder[]) {
        Map<Integer, Integer> map = mapping(inorder);
        int arr[] = {0};
        return Build(inorder, preorder, map, arr, 0, inorder.length - 1);
    }

    // Function to print the tree in postorder traversal
    void printPostorder(Node node) {
        if (node == null) {
            return;
        }
        
        // Traverse the left subtree
        printPostorder(node.left);

        // Traverse the right subtree
        printPostorder(node.right);
        
        // Print the node value
        System.out.print(node.val + " ");
    }
    
    public static void main(String[] args) {
        Solution treeBuilder = new Solution();

        // Example 1
        int[] inorder1 = {1, 6, 8, 7};
        int[] preorder1 = {1, 6, 7, 8};
        Node root1 = treeBuilder.buildTree(inorder1, preorder1);
        System.out.print("Postorder traversal for Example 1: ");
        treeBuilder.printPostorder(root1);
        System.out.println();

        // Example 2
        int[] inorder2 = {3, 1, 4, 0, 2, 5};
        int[] preorder2 = {0, 1, 3, 4, 2, 5};
        Node root2 = treeBuilder.buildTree(inorder2, preorder2);
        System.out.print("Postorder traversal for Example 2: ");
        treeBuilder.printPostorder(root2);
        System.out.println();

        // Example 3
        int[] inorder3 = {2, 5, 4, 1, 3};
        int[] preorder3 = {1, 4, 5, 2, 3};
        Node root3 = treeBuilder.buildTree(inorder3, preorder3);
        System.out.print("Postorder traversal for Example 3: ");
        treeBuilder.printPostorder(root3);
        System.out.println();
    }
}



Link:  <https://www.geeksforgeeks.org/batch/gfg-160-problems/track/tree-gfg-160/problem/construct-tree-1> 
