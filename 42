====================== Question =======================

Check for BST

Given the root of a binary tree. Check whether it is a BST or not.
Note: We are considering that BSTs can not contain duplicate Nodes.
A BST is defined as follows:
	• The left subtree of a node contains only nodes with keys less than the node's key.
	• The right subtree of a node contains only nodes with keys greater than the node's key.
	• Both the left and right subtrees must also be binary search trees.
Examples:
Input: root = [2, 1, 3, N, N, N, 5]



Output: true 
Explanation: The left subtree of every node contains smaller keys and right subtree of every node contains greater keys. Hence, the tree is a BST.
Input: root = [2, N, 7, N, 6, N, 9] 




Output: false 
Explanation: Since the node to the right of node with key 7 has lesser key value, hence it is not a valid BST.
Input: root = [10, 5, 20, N, N, 9, 25]



Output: false
Explanation: The node with key 9 present in the right subtree has lesser key value than root node.
Constraints:
1 ≤ number of nodes ≤ 10^5
1 ≤ node->data ≤ 10^9


====================== Answer =======================

class Node {
    int data;
    Node left, right;

    Node(int item) {
        data = item;
        left = right = null;
    }
}

public class BinaryTree {
    Node root;

    // Function to check if the binary tree is a BST
    boolean isBST(Node node) {
        return isBSTUtil(node, Long.MIN_VALUE, Long.MAX_VALUE);
    }

    // Utility function to check if the binary tree is a BST
    boolean isBSTUtil(Node node, long min, long max) {
        // Base case: an empty tree is a BST
        if (node == null) {
            return true;
        }

        // If this node violates the min/max constraint, return false
        if (node.data <= min || node.data >= max) {
            return false;
        }

        // Check the subtrees recursively, tightening the min/max constraints
        return (isBSTUtil(node.left, min, node.data) &&
                isBSTUtil(node.right, node.data, max));
    }

    public static void main(String[] args) {
        BinaryTree tree = new BinaryTree();

        // Example 1
        tree.root = new Node(2);
        tree.root.left = new Node(1);
        tree.root.right = new Node(3);
        System.out.println(tree.isBST(tree.root)); // Output: true

        // Example 2
        tree.root = new Node(2);
        tree.root.right = new Node(7);
        tree.root.right.left = new Node(6);
        tree.root.right.right = new Node(9);
        System.out.println(tree.isBST(tree.root)); // Output: false

        // Example 3
        tree.root = new Node(10);
        tree.root.left = new Node(5);
        tree.root.right = new Node(20);
        tree.root.right.left = new Node(9);
        tree.root.right.right = new Node(25);
        System.out.println(tree.isBST(tree.root)); // Output: false
    }
}



Link: <https://www.geeksforgeeks.org/batch/gfg-160-problems/track/tree-gfg-160/problem/check-for-bst> 
