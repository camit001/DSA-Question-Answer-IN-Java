======================= Question =========================


Given a root of a binary tree with n nodes, the task is to find its level order traversal. Level order traversal of a tree is breadth-first traversal for the tree.
Examples:
Input: root[] = [1, 2, 3]

Output: [[1], [2, 3]]

Input: root[] = [10, 20, 30, 40, 50]

Output: [[10], [20, 30], [40, 50]]
Input: root[] = [1, 3, 2, N, N, N, 4, 6, 5]

Output: [[1], [3, 2], [4], [6, 5]]
Constraints:
	• 1 ≤ number of nodes ≤ 10^5
	• 0 ≤ node->data ≤ 10^9



======================= Answer =========================


import java.util.*;

class Node {
    int data;
    Node left, right;
    Node(int item) {
        data = item;
        left = right = null;
    }
}

public class BinaryTree {
    public ArrayList<ArrayList<Integer>> levelOrder(Node root) {
        ArrayList<ArrayList<Integer>> result = new ArrayList<>();
        if (root == null) {
            return result;
        }

        Queue<Node> queue = new LinkedList<>();
        queue.offer(root);

        while (!queue.isEmpty()) {
            int levelSize = queue.size();
            ArrayList<Integer> currentLevel = new ArrayList<>();

            for (int i = 0; i < levelSize; i++) {
                Node currentNode = queue.poll();
                currentLevel.add(currentNode.data);

                if (currentNode.left != null) {
                    queue.offer(currentNode.left);
                }
                if (currentNode.right != null) {
                    queue.offer(currentNode.right);
                }
            }
            result.add(currentLevel);
        }

        return result;
    }

    public static void main(String[] args) {
        // Example usage:
        BinaryTree tree = new BinaryTree();
        
        Node root1 = new Node(1);
        root1.left = new Node(2);
        root1.right = new Node(3);
        System.out.println(tree.levelOrder(root1));  // Output: [[1], [2, 3]]

        Node root2 = new Node(10);
        root2.left = new Node(20);
        root2.right = new Node(30);
        root2.left.left = new Node(40);
        root2.left.right = new Node(50);
        System.out.println(tree.levelOrder(root2));  // Output: [[10], [20, 30], [40, 50]]
        
        Node root3 = new Node(1);
        root3.left = new Node(3);
        root3.right = new Node(2);
        root3.right.right = new Node(4);
        root3.right.right.left = new Node(6);
        root3.right.right.right = new Node(5);
        System.out.println(tree.levelOrder(root3));  // Output: [[1], [3, 2], [4], [6, 5]]
    }
}



From <https://www.geeksforgeeks.org/batch/gfg-160-problems/track/tree-gfg-160/problem/level-order-traversal> 
