===================== Question ==========================


Given the head of a linked list that may contain a loop.  A loop means that the last node of the linked list is connected back to a node in the same list. The task is to remove the loop from the linked list (if it exists).

Custom Input format:

A head of a singly linked list and a pos (1-based index) which denotes the position of the node to which the last node points to. If pos = 0, it means the last node points to null, indicating there is no loop.

The generated output will be true if there is no loop in list and other nodes in the list remain unchanged, otherwise, false.

Examples:

Input: head = 1 -> 3 -> 4, pos = 2
Output: true
Explanation: The linked list looks like

A loop is present in the list, and it is removed.
Input: head = 1 -> 8 -> 3 -> 4, pos = 0
Output: true
Explanation: 

The Linked list does not contains any loop. 
Input: head = 1 -> 2 -> 3 -> 4, pos = 1
Output: true
Explanation: The linked list looks like 

A loop is present in the list, and it is removed.
Constraints:
1 ≤ size of linked list ≤ 10^5


===================== Answer ==========================


class Node {
    int value;
    Node next;

    Node(int value) {
        this.value = value;
        this.next = null;
    }
}

public class LinkedListLoop {

    public static void removeLoop(Node head) {
        if (head == null || head.next == null) {
            return;
        }

        Node slow = head, fast = head;
        boolean loopExists = false;

        // Detect loop using Floyd’s Cycle-Finding Algorithm
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
            if (slow == fast) {
                loopExists = true;
                break;
            }
        }

        if (loopExists) {
            // Find the starting point of the loop
            slow = head;
            while (slow != fast) {
                slow = slow.next;
                fast = fast.next;
            }

            // Find the previous node of the starting point of the loop
            while (fast.next != slow) {
                fast = fast.next;
            }

            // Remove the loop
            fast.next = null;
        }
    }

    // Helper function to print the linked list
    public static void printList(Node head) {
        while (head != null) {
            System.out.print(head.value + " ");
            head = head.next;
        }
        System.out.println();
    }

    // Helper function to create a linked list with a loop
    public static Node createLinkedListWithLoop(int[] values, int pos) {
        if (values.length == 0) {
            return null;
        }
        Node head = new Node(values[0]);
        Node current = head;
        Node loopNode = null;

        for (int i = 1; i < values.length; i++) {
            current.next = new Node(values[i]);
            current = current.next;
            if (i == pos - 1) {
                loopNode = current;
            }
        }

        if (pos != 0) {
            current.next = loopNode;
        }

        return head;
    }

    public static void main(String[] args) {
        // Case 1: 1 -> 3 -> 4, pos = 2
        int[] values1 = {1, 3, 4};
        int pos1 = 2;
        Node head1 = createLinkedListWithLoop(values1, pos1);
        removeLoop(head1);
        System.out.print("Output: ");
        printList(head1);

        // Case 2: 1 -> 8 -> 3 -> 4, pos = 0
        int[] values2 = {1, 8, 3, 4};
        int pos2 = 0;
        Node head2 = createLinkedListWithLoop(values2, pos2);
        removeLoop(head2);
        System.out.print("Output: ");
        printList(head2);

        // Case 3: 1 -> 2 -> 3 -> 4, pos = 1
        int[] values3 = {1, 2, 3, 4};
        int pos3 = 1;
        Node head3 = createLinkedListWithLoop(values3, pos3);
        removeLoop(head3);
        System.out.print("Output: ");
        printList(head3);
    }
}



Link: <https://www.geeksforgeeks.org/batch/gfg-160-problems/track/linked-list-gfg-160/problem/remove-loop-in-linked-list> 
