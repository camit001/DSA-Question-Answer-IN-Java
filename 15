===================== Question ===========================


Given an array arr[] containing integers and an integer k, your task is to find the length of the longest subarray where the sum of its elements is equal to the given value k. If there is no subarray with sum equal to k, return 0.

Examples:

Input: arr[] = [10, 5, 2, 7, 1, -10], k = 15
Output: 6
Explanation: Subarrays with sum = 15 are [5, 2, 7, 1], [10, 5] and [10, 5, 2, 7, 1, -10]. The length of the longest subarray with a sum of 15 is 6.
Input: arr[] = [-5, 8, -14, 2, 4, 12], k = -5
Output: 5
Explanation: Only subarray with sum = 15 is [-5, 8, -14, 2, 4] of length 5.
Input: arr[] = [10, -10, 20, 30], k = 5
Output: 0
Explanation: No subarray with sum = 5 is present in arr[].
Constraints:
1 ≤ arr.size() ≤ 105
-104 ≤ arr[i] ≤ 104
-109 ≤ k ≤ 109


===================== Answer ===========================


import java.util.HashMap;

public class Solution {
    public int longestSubarray(int[] arr, int k) {
        // Create a map to store the prefix sums and their corresponding indices
        HashMap<Integer, Integer> prefixSumMap = new HashMap<>();
        int maxLength = 0;
        int sum = 0;

        for (int i = 0; i < arr.length; i++) {
            sum += arr[i];

            // If the sum equals k, update maxLength
            if (sum == k) {
                maxLength = i + 1;
            }

            // If the (sum - k) exists in the map, update maxLength
            if (prefixSumMap.containsKey(sum - k)) {
                maxLength = Math.max(maxLength, i - prefixSumMap.get(sum - k));
            }

            // Store the sum in the map if it does not already exist
            if (!prefixSumMap.containsKey(sum)) {
                prefixSumMap.put(sum, i);
            }
        }

        return maxLength;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();

        int[] arr1 = {10, 5, 2, 7, 1, -10};
        int k1 = 15;
        System.out.println("Length of the longest subarray with sum " + k1 + " is: " + solution.longestSubarray(arr1, k1));

        int[] arr2 = {-5, 8, -14, 2, 4, 12};
        int k2 = -5;
        System.out.println("Length of the longest subarray with sum " + k2 + " is: " + solution.longestSubarray(arr2, k2));

        int[] arr3 = {10, -10, 20, 30};
        int k3 = 5;
        System.out.println("Length of the longest subarray with sum " + k3 + " is: " + solution.longestSubarray(arr3, k3));
    }
}



Link: <https://www.geeksforgeeks.org/batch/gfg-160-problems/track/prefix-sum-gfg-160/problem/longest-sub-array-with-sum-k0809> 
