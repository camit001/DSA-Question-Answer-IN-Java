======================== Question =======================

You are given the head of a singly linked list. Your task is to determine if the linked list contains a loop. A loop exists in a linked list if the next pointer of the last node points to any other node in the list (including itself), rather than being null.

Custom Input format:
A head of a singly linked list and a pos (1-based index) which denotes the position of the node to which the last node points to. If pos = 0, it means the last node points to null, indicating there is no loop.

Examples:

Input: head: 1 -> 3 -> 4, pos = 2
Output: true
Explanation: There exists a loop as last node is connected back to the second node.

Input: head: 1 -> 8 -> 3 -> 4, pos = 0
Output: false
Explanation: There exists no loop in given linked list.

Input: head: 1 -> 2 -> 3 -> 4, pos = 1
Output: true
Explanation: There exists a loop as last node is connected back to the first node.


Constraints:
1 ≤ number of nodes ≤ 10^4
1 ≤ node->data ≤ 10^3       
0 ≤ pos ≤ Number of nodes in Linked List


======================== Answer =======================

class Node {
    int data;
    Node next;
    Node(int data) {
        this.data = data;
        this.next = null;
    }
}

public class LinkedListCycleDetector {
    public static boolean detectLoop(Node head) {
        if (head == null || head.next == null) {
            return false;
        }

        Node slow = head;
        Node fast = head;

        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;

            if (slow == fast) {
                return true;
            }
        }

        return false;
    }

    public static Node createLinkedList(int[] nodes, int pos) {
        if (nodes.length == 0) {
            return null;
        }

        Node head = new Node(nodes[0]);
        Node current = head;
        Node loopNode = null;

        for (int i = 1; i < nodes.length; i++) {
            current.next = new Node(nodes[i]);
            current = current.next;

            if (i == pos - 1) {
                loopNode = current;
            }
        }

        if (pos > 0) {
            current.next = loopNode;
        }

        return head;
    }

    public static void main(String[] args) {
        int[] nodes = {1, 2, 3, 4};
        int pos = 1;

        Node head = createLinkedList(nodes, pos);
        System.out.println(detectLoop(head)); // Output: true
    }
}


Link: <https://www.geeksforgeeks.org/batch/gfg-160-problems/track/linked-list-gfg-160/problem/detect-loop-in-linked-list> 
