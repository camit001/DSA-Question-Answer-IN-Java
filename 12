======================= Question =========================

Given an array arr[] with non-negative integers representing the height of blocks. If the width of each block is 1, compute how much water can be trapped between the blocks during the rainy season. 

Examples:

Input: arr[] = [3, 0, 1, 0, 4, 0 2]
Output: 10
Explanation: Total water trapped = 0 + 3 + 2 + 3 + 0 + 2 + 0 = 10 units.

Input: arr[] = [3, 0, 2, 0, 4]
Output: 7
Explanation: Total water trapped = 0 + 3 + 1 + 3 + 0 = 7 units.
Input: arr[] = [1, 2, 3, 4]
Output: 0
Explanation: We cannot trap water as there is no height bound on both sides.
Input: arr[] = [2, 1, 5, 3, 1, 0, 4]
Output: 9
Explanation: Total water trapped = 0 + 1 + 0 + 1 + 3 + 4 + 0 = 9 units.
Constraints:
1 < arr.size() < 105
0 < arr[i] < 103

======================= Answer =========================

public class TrappingRainWater {

    public int maxWater(int arr[]) {
        if (arr == null || arr.length == 0) {
            return 0;
        }

        int n = arr.length;
        int left = 0, right = n - 1;
        int leftMax = 0, rightMax = 0;
        int waterTrapped = 0;

        while (left <= right) {
            if (arr[left] < arr[right]) {
                if (arr[left] >= leftMax) {
                    leftMax = arr[left];
                } else {
                    waterTrapped += leftMax - arr[left];
                }
                left++;
            } else {
                if (arr[right] >= rightMax) {
                    rightMax = arr[right];
                } else {
                    waterTrapped += rightMax - arr[right];
                }
                right--;
            }
        }

        return waterTrapped;
    }

    public static void main(String[] args) {
        TrappingRainWater trappingRainWater = new TrappingRainWater();

        int[] arr1 = {3, 0, 1, 0, 4, 0, 2};
        int[] arr2 = {3, 0, 2, 0, 4};
        int[] arr3 = {1, 2, 3, 4};
        int[] arr4 = {2, 1, 5, 3, 1, 0, 4};

        System.out.println("Total water trapped in arr1: " + trappingRainWater.maxWater(arr1)); // Output: 10
        System.out.println("Total water trapped in arr2: " + trappingRainWater.maxWater(arr2)); // Output: 7
        System.out.println("Total water trapped in arr3: " + trappingRainWater.maxWater(arr3)); // Output: 0
        System.out.println("Total water trapped in arr4: " + trappingRainWater.maxWater(arr4)); // Output: 9
    }
}




Link: <https://www.geeksforgeeks.org/batch/gfg-160-problems/track/two-pointer-technique-gfg-160/problem/trapping-rain-water-1587115621> 
