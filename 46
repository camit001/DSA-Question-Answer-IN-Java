====================== Question ========================

Serialize and deserialize a binary tree

Serialization is to store a tree in an array so that it can be later restored and deserialization is reading tree back from the array. Complete the functions
	• serialize() : stores the tree into an array a and returns the array.
	• deSerialize() : deserializes the array to the tree and returns the root of the tree.
Note: Multiple nodes can have the same data and the node values are always positive integers. Your code will be correct if the tree returned by deSerialize(serialize(input_tree)) is same as the input tree. Driver code will print the in-order traversal of the tree returned by deSerialize(serialize(input_tree)).
Examples :
Input: root = [1, 2, 3]
      

Output: [2, 1, 3]

Input: root = [10, 20, 30, 40, 60, N, N]
      

Output: [40, 20, 60, 10, 30]
Constraints:
1 <= Number of nodes <= 10^4
1 <= Data of a node <= 10^9


====================== Answer ========================

import java.util.*;

class Node {
    int val;
    Node left, right;
    Node(int x) {
        val = x;
        left = right = null;
    }
}

public class BinaryTree {
    // Serialize a tree to an array
    public ArrayList<Integer> serialize(Node root) {
        ArrayList<Integer> result = new ArrayList<>();
        Queue<Node> queue = new LinkedList<>();
        queue.add(root);
        while (!queue.isEmpty()) {
            Node node = queue.poll();
            if (node != null) {
                result.add(node.val);
                queue.add(node.left);
                queue.add(node.right);
            } else {
                result.add(null);
            }
        }
        return result;
    }

    // Deserialize an array to a tree
    public Node deSerialize(ArrayList<Integer> arr) {
        if (arr == null || arr.isEmpty() || arr.get(0) == null) {
            return null;
        }
        
        Node root = new Node(arr.get(0));
        Queue<Node> queue = new LinkedList<>();
        queue.add(root);
        int i = 1;
        while (i < arr.size()) {
            Node node = queue.poll();
            if (arr.get(i) != null) {
                node.left = new Node(arr.get(i));
                queue.add(node.left);
            }
            i++;
            if (i < arr.size() && arr.get(i) != null) {
                node.right = new Node(arr.get(i));
                queue.add(node.right);
            }
            i++;
        }
        return root;
    }
    
    // Driver code to test the implementation
    public static void main(String[] args) {
        BinaryTree bt = new BinaryTree();

        Node root = new Node(10);
        root.left = new Node(20);
        root.right = new Node(30);
        root.left.left = new Node(40);
        root.left.right = new Node(60);

        // Serialize the tree
        ArrayList<Integer> serializedData = bt.serialize(root);
        System.out.println("Serialized Tree: " + serializedData);

        // Deserialize the list to tree
        Node deserializedRoot = bt.deSerialize(serializedData);
        System.out.print("In-order traversal of the tree: ");
        inOrderTraversal(deserializedRoot);
    }

    // Helper function to do in-order traversal
    public static void inOrderTraversal(Node root) {
        if (root == null) {
            return;
        }
        inOrderTraversal(root.left);
        System.out.print(root.val + " ");
        inOrderTraversal(root.right);
    }
}



Limk:  <https://www.geeksforgeeks.org/batch/gfg-160-problems/track/tree-gfg-160/problem/serialize-and-deserialize-a-binary-tree> 
