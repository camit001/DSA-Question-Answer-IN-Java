===================== Question =====================


Lowest Common Ancestor in a BST

Given a Binary Search Tree (with all values unique) and two nodes n1 and n2 (n1 != n2). You may assume that both nodes exist in the tree. Find the Lowest Common Ancestor (LCA) of the given two nodes in the BST.
LCA between two nodes n1 and n2 is defined as the lowest node that has both n1 and n2 as descendants (where we allow a node to be a descendant of itself).
Examples:
Input: root = [5, 4, 6, 3, N, N, 7, N, N, N, 8], n1 = 7, n2 = 8
        

Output: 7
Explanation: 7 is the closest node to both 7 and 8, which is also an ancestor of both the nodes.

Input: root = [20, 8, 22, 4, 12, N, N, N, N, 10, 14], n1 = 8, n2 = 14

       
Output: 8
Explanation: 8 is the closest node to both 8 and 14, which is also an ancestor of both the nodes.
Input: root = [2, 1, 3], n1 = 1, n2 = 3
        

Output: 2
Explanation: 2 is the closest node to both 1 and 3, which is also an ancestor of both the nodes.
Constraints:
1 <= number of nodes <= 10^5
1 <= node->data <= 10^5
1 <= n1, n2 <= 10^5


===================== Question =====================

class Node {
    int data;
    Node left, right;

    Node(int item) {
        data = item;
        left = right = null;
    }
}

public class BST {
    Node root;

    // Function to find the LCA of n1 and n2
    Node LCA(Node root, Node n1, Node n2) {
        if (root == null) {
            return null;
        }

        // If both n1 and n2 are smaller than root, then LCA lies in the left subtree
        if (root.data > n1.data && root.data > n2.data) {
            return LCA(root.left, n1, n2);
        }

        // If both n1 and n2 are greater than root, then LCA lies in the right subtree
        if (root.data < n1.data && root.data < n2.data) {
            return LCA(root.right, n1, n2);
        }

        // If one key is smaller and one key is greater, then the current node is the LCA
        return root;
    }

    // Insert a new node with given key in BST
    Node insert(Node node, int key) {
        // If the tree is empty, return a new node
        if (node == null) {
            node = new Node(key);
            return node;
        }

        // Otherwise, recur down the tree
        if (key < node.data) {
            node.left = insert(node.left, key);
        } else if (key > node.data) {
            node.right = insert(node.right, key);
        }

        // Return the (unchanged) node pointer
        return node;
    }

    public static void main(String[] args) {
        BST tree = new BST();
        tree.root = tree.insert(tree.root, 20);
        tree.root = tree.insert(tree.root, 8);
        tree.root = tree.insert(tree.root, 22);
        tree.root = tree.insert(tree.root, 4);
        tree.root = tree.insert(tree.root, 12);
        tree.root = tree.insert(tree.root, 10);
        tree.root = tree.insert(tree.root, 14);

        Node n1 = tree.root.left.right.left; // Node with value 10
        Node n2 = tree.root.left.right.right; // Node with value 14
        Node t = tree.LCA(tree.root, n1, n2);
        System.out.println("LCA of " + n1.data + " and " + n2.data + " is " + t.data);

        n1 = tree.root.left; // Node with value 8
        n2 = tree.root.left.right.right; // Node with value 14
        t = tree.LCA(tree.root, n1, n2);
        System.out.println("LCA of " + n1.data + " and " + n2.data + " is " + t.data);

        n1 = tree.root.left.right.left; // Node with value 10
        n2 = tree.root.right; // Node with value 22
        t = tree.LCA(tree.root, n1, n2);
        System.out.println("LCA of " + n1.data + " and " + n2.data



Link:  <https://www.geeksforgeeks.org/batch/gfg-160-problems/track/tree-gfg-160/problem/lowest-common-ancestor-in-a-bst> 
