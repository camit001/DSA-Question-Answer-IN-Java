===================== Question =======================

Height of Binary Tree

Given a binary tree, find its height.
	The height of a tree is defined as the number of edges on the longest path from the root to a leaf node. A leaf node is a node that does not have any children.
Examples:
Input: root[] = [12, 8, 18, 5, 11] 

Output: 2
Explanation: One of the longest path from the root (node 12) goes through node 8 to node 5, which has 2 edges.
Input: root[] = [1, 2, 3, 4, N, N, 5, N, N, 6, 7]  

Output: 3
Explanation: The longest path from the root (node 1) to a leaf node 6 with 3 edge.
Constraints:
1 <= number of nodes <= 10^5
0 <= node->data <= 10^5


===================== Answer =======================

class Node {
    int data;
    Node left, right;

    Node(int item) {
        data = item;
        left = right = null;
    }
}

public class BinaryTree {

    // Function to find the height of the tree
    int height(Node node) {
        if (node == null) {
            return -1; // Height of empty tree is considered -1
        }

        int leftHeight = height(node.left);
        int rightHeight = height(node.right);

        // Return the maximum of left height and right height plus 1 for the current node
        return Math.max(leftHeight, rightHeight) + 1;
    }

    public static void main(String[] args) {
        // Example 1
        Node root1 = new Node(12);
        root1.left = new Node(8);
        root1.right = new Node(18);
        root1.left.left = new Node(5);
        root1.left.right = new Node(11);

        BinaryTree tree1 = new BinaryTree();
        System.out.println("Height of tree 1: " + tree1.height(root1)); // Output: 2

        // Example 2
        Node root2 = new Node(1);
        root2.left = new Node(2);
        root2.right = new Node(3);
        root2.left.left = new Node(4);
        root2.right.right = new Node(5);
        root2.left.left.right = new Node(6);
        root2.right.right.right = new Node(7);

        BinaryTree tree2 = new BinaryTree();
        System.out.println("Height of tree 2: " + tree2.height(root2)); // Output: 3
    }
}




Linnk:  <https://www.geeksforgeeks.org/batch/gfg-160-problems/track/tree-gfg-160/problem/height-of-binary-tree> 
