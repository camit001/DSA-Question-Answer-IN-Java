===================== Question =======================

Diameter of a Binary Tree

Given a binary tree, the diameter (also known as the width) is defined as the number of edges on the longest path between two leaf nodes in the tree. This path may or may not pass through the root. Your task is to find the diameter of the tree.
Examples:
Input: root[] = [1, 2, 3]

Output: 2
Explanation: The longest path has 2 edges (node 2 -> node 1 -> node 3).

Input: root[] = [5, 8, 6, 3, 7, 9]

Output: 4
Explanation: The longest path has 4 edges (node 3 -> node 8 -> node 5 -> node 6 -> node 9).

Constraints:
1 ≤ number of nodes ≤ 10^5
0 ≤ node->data ≤ 10^5


===================== Answer =======================

class Node {
    int data;
    Node left, right;

    Node(int item) {
        data = item;
        left = right = null;
    }
}

public class BinaryTree {
    Node root;

    // A utility class to wrap the diameter value
    class A {
        int ans = Integer.MIN_VALUE;
    }

    int height(Node node, A a) {
        if (node == null)
            return 0;

        int leftHeight = height(node.left, a);
        int rightHeight = height(node.right, a);

        // Update the diameter if the path through the current node is larger
        a.ans = Math.max(a.ans, 1 + leftHeight + rightHeight);

        // Return height of the current node
        return 1 + Math.max(leftHeight, rightHeight);
    }

    int diameter(Node root) {
        A a = new A();
        height(root, a);
        return a.ans - 1;  // Subtract 1 to get the number of edges in the path
    }

    // Driver code
    public static void main(String[] args) {
        BinaryTree tree = new BinaryTree();
        tree.root = new Node(1);
        tree.root.left = new Node(2);
        tree.root.right = new Node(3);
        
        System.out.println("Diameter of the tree is " + tree.diameter(tree.root));
    }
}



Link:  <https://www.geeksforgeeks.org/batch/gfg-160-problems/track/tree-gfg-160/problem/diameter-of-binary-tree> 
