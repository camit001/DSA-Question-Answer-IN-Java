====================== Question ===========================

Given an integer array arr[] and a number k. Find the count of distinct elements in every window of size k in the array.

Examples:

Input: arr[] = [1, 2, 1, 3, 4, 2, 3], k = 4
Output:  [3, 4, 4, 3]
Explanation: Window 1 of size k = 4 is 1 2 1 3. Number of distinct elements in this window are 3. 
Window 2 of size k = 4 is 2 1 3 4. Number of distinct elements in this window are 4.
Window 3 of size k = 4 is 1 3 4 2. Number of distinct elements in this window are 4.
Window 4 of size k = 4 is 3 4 2 3. Number of distinct elements in this window are 3.
Input: arr[] = [4, 1, 1], k = 2
Output: [2, 1]
Explanation: Window 1 of size k = 2 is 4 1. Number of distinct elements in this window are 2. 
Window 2 of size k = 2 is 1 1. Number of distinct elements in this window is 1. 
Input: arr[] = [1, 1, 1, 1, 1], k = 3
Output: [1, 1, 1]
Constraints:
1 <= k <= arr.size() <= 105
1 <= arr[i] <= 105


====================== Answer ===========================

import java.util.ArrayList;
import java.util.HashMap;

public class DistinctElementsInWindow {
    public static ArrayList<Integer> countDistinct(int arr[], int k) {
        ArrayList<Integer> result = new ArrayList<>();
        HashMap<Integer, Integer> map = new HashMap<>();
        
        // Count distinct elements in the first window
        for (int i = 0; i < k; i++) {
            map.put(arr[i], map.getOrDefault(arr[i], 0) + 1);
        }
        result.add(map.size());
        
        // Process remaining windows
        for (int i = k; i < arr.length; i++) {
            // Remove the first element of the previous window
            if (map.get(arr[i - k]) == 1) {
                map.remove(arr[i - k]);
            } else {
                map.put(arr[i - k], map.get(arr[i - k]) - 1);
            }
            
            // Add the current element to the window
            map.put(arr[i], map.getOrDefault(arr[i], 0) + 1);
            
            // Add the count of distinct elements in the current window to the result
            result.add(map.size());
        }
        
        return result;
    }

    public static void main(String[] args) {
        int[] arr1 = {1, 2, 1, 3, 4, 2, 3};
        int k1 = 4;
        System.out.println("Output: " + countDistinct(arr1, k1));

        int[] arr2 = {4, 1, 1};
        int k2 = 2;
        System.out.println("Output: " + countDistinct(arr2, k2));

        int[] arr3 = {1, 1, 1, 1, 1};
        int k3 = 3;
        System.out.println("Output: " + countDistinct(arr3, k3));
    }
}



Link: <https://www.geeksforgeeks.org/batch/gfg-160-problems/track/two-pointer-technique-gfg-160/problem/count-distinct-elements-in-every-window> 
