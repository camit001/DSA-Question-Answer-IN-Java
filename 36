====================== Question ========================


Mirror Tree

Given a binary tree, convert the binary tree to its Mirror tree.
Mirror of a Binary Tree T is another Binary Tree M(T) with left and right children of all non-leaf nodes interchanged.     
Examples:
Input: root[] = [1, 2, 3, N, N, 4]
Output: [1, 3, 2, N, 4]
Explanation: 

In the inverted tree, every non-leaf node has its left and right child interchanged.
Input: root[] = [1, 2, 3, 4, 5]
Output: [1, 3, 2, N, N, 5, 4]
Explanation:


In the inverted tree, every non-leaf node has its left and right child interchanged.
Constraints:
1 ≤ number of nodes ≤ 10^5
1 ≤ node->data ≤ 10^5


====================== Answer ========================


class Node {
    int data;
    Node left, right;

    public Node(int item) {
        data = item;
        left = right = null;
    }
}

public class BinaryTree {
    Node root;

    // Function to convert a binary tree to its mirror tree
    void mirror(Node node) {
        if (node == null) {
            return;
        }

        // Recursively convert left and right subtrees
        mirror(node.left);
        mirror(node.right);

        // Swap left and right children
        Node temp = node.left;
        node.left = node.right;
        node.right = temp;
    }

    // Helper function to print the tree in inorder traversal
    void inorder(Node node) {
        if (node == null) {
            return;
        }

        inorder(node.left);
        System.out.print(node.data + " ");
        inorder(node.right);
    }

    // Main function to test the mirror function
    public static void main(String[] args) {
        BinaryTree tree = new BinaryTree();

        // Construct the binary tree
        tree.root = new Node(1);
        tree.root.left = new Node(2);
        tree.root.right = new Node(3);
        tree.root.left.left = new Node(4);
        tree.root.left.right = new Node(5);

        // Print the original tree
        System.out.print("Original Tree: ");
        tree.inorder(tree.root);
        System.out.println();

        // Convert to mirror tree
        tree.mirror(tree.root);

        // Print the mirror tree
        System.out.print("Mirror Tree: ");
        tree.inorder(tree.root);
    }
}



Link:  <https://www.geeksforgeeks.org/batch/gfg-160-problems/track/tree-gfg-160/problem/mirror-tree> 
