======================= Question =======================


Inorder Traversal

Given a Binary Tree, your task is to return its In-Order Traversal.
An inorder traversal first visits the left child (including its entire subtree), then visits the node, and finally visits the right child (including its entire subtree).
Follow Up: Try solving this with O(1) auxiliary space.
Examples:
Input: root[] = [1, 2, 3, 4, 5] 
      

Output: [4, 2, 5, 1, 3]
Explanation: The in-order traversal of the given binary tree is [4, 2, 5, 1, 3].
Input: root[] = [8, 1, 5, N, 7, 10, 6, N, 10, 6]
      

Output: [1, 7, 10, 8, 6, 10, 5, 6]
Explanation: The in-order traversal of the given binary tree is [1, 7, 10, 8, 6, 10, 5, 6].
Constraints:
	• 1 <= number of nodes <= 10^5
	• 0 <= node->data <= 10^5


======================= Answer =======================


import java.util.*;

class Node {
    int data;
    Node left, right;
    Node(int item) {
        data = item;
        left = right = null;
    }
}

public class BinaryTree {
    // Morris Traversal for In-order without extra space
    ArrayList<Integer> inOrder(Node root) {
        ArrayList<Integer> result = new ArrayList<>();
        Node current = root;
        while (current != null) {
            if (current.left == null) {
                result.add(current.data);
                current = current.right;
            } else {
                // Find the inorder predecessor of current
                Node predecessor = current.left;
                while (predecessor.right != null && predecessor.right != current) {
                    predecessor = predecessor.right;
                }

                // Make current the right child of its inorder predecessor
                if (predecessor.right == null) {
                    predecessor.right = current;
                    current = current.left;
                } else {
                    // Revert the changes made to restore the original tree
                    predecessor.right = null;
                    result.add(current.data);
                    current = current.right;
                }
            }
        }
        return result;
    }

    public static void main(String[] args) {
        BinaryTree tree = new BinaryTree();
        Node root = new Node(1);
        root.left = new Node(2);
        root.right = new Node(3);
        root.left.left = new Node(4);
        root.left.right = new Node(5);

        ArrayList<Integer> inorder = tree.inOrder(root);
        System.out.println(inorder); // Output: [4, 2, 5, 1, 3]
    }
}




Link:  <https://www.geeksforgeeks.org/batch/gfg-160-problems/track/tree-gfg-160/problem/inorder-traversal> 
