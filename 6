====================== Question ==========================

Given an array arr[] and a number target, find a pair of elements (a, b) in arr[], where a<=b whose sum is closest to target.
Note: Return the pair in sorted order and if there are multiple such pairs return the pair with maximum absolute difference. If no such pair exists return an empty array.

Examples:

Input: arr[] = [10, 30, 20, 5], target = 25
Output: [5, 20]
Explanation: As 5 + 20 = 25 is closest to 25.
Input: arr[] = [5, 2, 7, 1, 4], target = 10
Output: [2, 7]
Explanation: As (4, 7) and (2, 7) both are closest to 10, but absolute difference of (2, 7) is 5 and (4, 7) is 3. Hence, [2, 7] has maximum absolute difference and closest to target. 
Input: arr[] = [10], target = 10
Output: []
Explanation: As the input array has only 1 element, return an empty array.
Constraints:
1 <= arr.size() <= 2*105
0 <= target<= 2*105
0 <= arr[i] <= 105


====================== Answer ==========================


import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class ClosestSumPair {

    public static List<Integer> sumClosest(int[] arr, int target) {
        Arrays.sort(arr);
        int n = arr.length;
        List<Integer> closestPair = new ArrayList<>();
        int left = 0, right = n - 1;
        int minDiff = Integer.MAX_VALUE;

        while (left < right) {
            int sum = arr[left] + arr[right];
            int diff = Math.abs(target - sum);

            if (diff < minDiff) {
                minDiff = diff;
                if (closestPair.isEmpty()) {
                    closestPair.add(arr[left]);
                    closestPair.add(arr[right]);
                } else {
                    closestPair.set(0, arr[left]);
                    closestPair.set(1, arr[right]);
                }
            }

            if (sum < target) {
                left++;
            } else {
                right--;
            }
        }

        return closestPair;
    }

    public static void main(String[] args) {
        int[] arr1 = {10, 30, 20, 5};
        int target1 = 25;
        System.out.println(sumClosest(arr1, target1)); // Output: [5, 20]

        int[] arr2 = {5, 2, 7, 1, 4};
        int target2 = 10;
        System.out.println(sumClosest(arr2, target2)); // Output: [2, 7]

        int[] arr3 = {10};
        int target3 = 10;
        System.out.println(sumClosest(arr3, target3)); // Output: []
    }
}




Link: <https://www.geeksforgeeks.org/batch/gfg-160-problems/track/two-pointer-technique-gfg-160/problem/pair-in-array-whose-sum-is-closest-to-x1124> 
