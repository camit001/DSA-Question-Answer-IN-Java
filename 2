============================ Question ==================================
Given an unsorted array of integers, find the number of continuous subarrays having sum exactly equal to a given number k.

Examples:

Input: arr = [10, 2, -2, -20, 10], k = -10
Output: 3
Explaination: Subarrays: arr[0...3], arr[1...4], arr[3...4] have sum exactly equal to -10.
Input: arr = [9, 4, 20, 3, 10, 5], k = 33
Output: 2
Explaination: Subarrays: arr[0...2], arr[2...4] have sum exactly equal to 33.
Input: arr = [1, 3, 5], k = 0
Output: 0
Explaination: No subarray with 0 sum.
Constraints:

1 ≤ arr.size() ≤ 105
-103 ≤ arr[i] ≤ 103
-107 ≤ k ≤ 107


============================ Answer ==================================

import java.util.HashMap;
import java.util.Map;

public class SubarraySum {
    
    public int countSubarrays(int[] arr, int k) {
        Map<Integer, Integer> prefixSumMap = new HashMap<>();
        int currentSum = 0;
        int count = 0;

        for (int num : arr) {
            currentSum += num;

            if (currentSum == k) {
                count++;
            }

            if (prefixSumMap.containsKey(currentSum - k)) {
                count += prefixSumMap.get(currentSum - k);
            }

            prefixSumMap.put(currentSum, prefixSumMap.getOrDefault(currentSum, 0) + 1);
        }

        return count;
    }

    public static void main(String[] args) {
        SubarraySum subarraySum = new SubarraySum();

        int[] arr1 = {10, 2, -2, -20, 10};
        int k1 = -10;
        System.out.println(subarraySum.countSubarrays(arr1, k1));  // Output: 3

        int[] arr2 = {9, 4, 20, 3, 10, 5};
        int k2 = 33;
        System.out.println(subarraySum.countSubarrays(arr2, k2));  // Output: 2

        int[] arr3 = {1, 3, 5};
        int k3 = 0;
        System.out.println(subarraySum.countSubarrays(arr3, k3));  // Output: 0
    }
}
